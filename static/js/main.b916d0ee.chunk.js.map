{"version":3,"sources":["img/LaLiga.png","img/Bundesliga.png","img/Eredivisie.png","img/Ligue1.png","img/PremierLeague.png","img/SerieA.png","components/Header.js","components/Button.js","components/Row.js","components/TableBody.js","components/LeagueInfo.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Header","props","children","Button","onClick","handleClick","data-leagueid","leagueId","text","Row","className","position","src","crestURI","alt","teamName","playedGames","wins","draws","losses","goalsFor","goalsAgainst","goalDifference","points","TableBody","title","LeagueInfo","imgSrc","leagueCaption","Bundesliga","Eredivisie","LaLiga","Ligue1","PremierLeague","SerieA","App","state","leagueName","rows","leagues","buttons","handleLeagueClick","bind","e","newId","target","getAttribute","this","setState","fetchData","fetch","headers","then","response","json","responseJson","standings","table","map","item","index","won","draw","lost","team","crestUrl","name","push","key","competition","catch","error","console","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,oC,qBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,oC,uMCU5BC,G,MARA,SAACC,GACZ,OACI,gCACKA,EAAMC,YCKJC,EARA,SAACF,GACZ,OACI,4BAAQG,QAASH,EAAMI,YAAaC,gBAAeL,EAAMM,UACpDN,EAAMO,OCqCJC,EAxCH,SAACR,GACT,OACI,4BACI,wBAAIS,UAAU,iBACTT,EAAMU,UAEX,wBAAID,UAAU,aACV,yBAAKA,UAAU,SACX,yBAAKE,IAAKX,EAAMY,SAAUC,IAAI,MAElC,8BAAOb,EAAMc,WAEjB,4BACKd,EAAMe,aAEX,4BACKf,EAAMgB,MAEX,4BACKhB,EAAMiB,OAEX,4BACKjB,EAAMkB,QAEX,4BACKlB,EAAMmB,UAEX,4BACKnB,EAAMoB,cAEX,4BACKpB,EAAMqB,gBAEX,wBAAIZ,UAAU,eACTT,EAAMsB,UCQRC,EA1CG,SAACvB,GACf,OACI,2BAAOS,UAAU,aACb,+BACI,wBAAIA,UAAU,cACV,wBAAIA,UAAU,iBAAd,KAGA,wBAAIA,UAAU,aAAd,QAGA,wBAAIe,MAAM,kBAAV,MAGA,wBAAIA,MAAM,QAAV,KAGA,wBAAIA,MAAM,SAAV,KAGA,wBAAIA,MAAM,UAAV,KAGA,wBAAIA,MAAM,aAAV,MAGA,wBAAIA,MAAM,iBAAV,MAGA,wBAAIA,MAAM,oBAAV,MAGA,wBAAIA,MAAM,eAAV,QAIHxB,EAAMC,Y,mGCURwB,EAxCI,SAACzB,GAChB,IAAI0B,EACJ,OAAQ1B,EAAM2B,eAEV,IAAK,aACDD,EAASE,IACT,MAEJ,IAAK,aACDF,EAASG,IACT,MAEJ,IAAK,mBACDH,EAASI,IACT,MAEJ,IAAK,UACDJ,EAASK,IACT,MAEJ,IAAK,iBACDL,EAASM,IACT,MAEJ,IAAK,UACDN,EAASO,IACT,MAEJ,QACIP,EAASI,IAIjB,OACI,yBAAKrB,UAAU,eACX,yBAAKE,IAAKe,EAAQb,IAAI,OCoDnBqB,E,YArFb,WAAYlC,GAAQ,IAAD,8BACjB,4CAAMA,KACDmC,MAAQ,CACXC,WAAY,UACZC,KAAM,GACN/B,SAAU,KACVgC,QAAS,CACP,UAAW,KACX,iBAAkB,KAClB,WAAc,MACd,UAAW,MACX,WAAc,MACd,UAAW,MAEbC,QAAS,IAEX,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAhBR,E,+EAmBDC,GAAI,IAAD,OACbC,EAAQD,EAAEE,OAAOC,aAAa,iBACpCC,KAAKC,SAAS,CACZzC,SAAUqC,IACT,WAAQ,EAAKK,iB,kCAGL,IAAD,OAER1C,EAAWwC,KAAKX,MAAM7B,SAGxB2C,MAFQ,iDAAmD3C,EAAW,aAE3D,CAAE4C,QAAS,CAAE,eAJV,sCAKXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMjB,EAAO,GACbiB,EAAaC,UAAU,GAAGC,MAAMC,KAC9B,SAACC,EAAMC,GAAW,IACRjD,EAA2FgD,EAA3FhD,SAAUK,EAAiF2C,EAAjF3C,YAAa6C,EAAoEF,EAApEE,IAAKC,EAA+DH,EAA/DG,KAAMC,EAAyDJ,EAAzDI,KAAM3C,EAAmDuC,EAAnDvC,SAAUC,EAAyCsC,EAAzCtC,aAAcC,EAA2BqC,EAA3BrC,eAAgBC,EAAWoC,EAAXpC,OADzE,EAEUoC,EAAKK,KAAvBC,EAFQ,EAERA,SAAUC,EAFF,EAEEA,KAEjB,OACE5B,EAAK6B,KACH,kBAAC,EAAD,CAAKC,IAAKR,EAAOjD,SAAUA,EAAUE,SAAUoD,EAAUlD,SAAUmD,EAAMlD,YAAaA,EAAaC,KAAM4C,EAAK3C,MAAO4C,EAAM3C,OAAQ4C,EAAM3C,SAAUA,EAAUC,aAAcA,EAAcC,eAAgBA,EAAgBC,OAAQA,QAKzO,EAAKyB,SAAS,CACZX,WAAYkB,EAAac,YAAYH,KACrC5B,KAAMA,OAGTgC,OAAM,SAACC,GACNC,QAAQD,MAAMA,Q,0CAMlB,IAAK,IAAIH,KADTrB,KAAKE,YACWF,KAAKX,MAAMG,QACzBQ,KAAKX,MAAMI,QAAQ2B,KACjB,kBAAC,EAAD,CAAQ9D,YAAa0C,KAAKN,kBAAmB2B,IAAKrB,KAAKX,MAAMG,QAAQ6B,GAAM7D,SAAUwC,KAAKX,MAAMG,QAAQ6B,GAAM5D,KAAM4D,O,+BAOxH,OACE,yBAAK1D,UAAU,OACb,kBAAC,EAAD,KACGqC,KAAKX,MAAMI,SAEd,yBAAK9B,UAAU,aACb,kBAAC,EAAD,CAAYkB,cAAemB,KAAKX,MAAMC,aACtC,kBAAC,EAAD,KACGU,KAAKX,MAAME,Y,GA9ENmC,aCEZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT7B,MAAK,SAAAiC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnD,QACf8C,UAAUC,cAAcO,WAK1BlB,QAAQmB,IAAI,6CAKZnB,QAAQmB,IAAI,4CAMrBrB,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MChEjEqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,gBAAwBrB,OAAOC,UAC3CqB,SAAWtB,OAAOC,SAASqB,OAIvC,OAGFtB,OAAOuB,iBAAiB,QAAQ,WAC9B,IAAMlB,EAAK,UAAMgB,gBAAN,sBAENvB,EAwCX,SAAiCO,GAE/B/B,MAAM+B,GACH7B,MAAK,SAAAC,GAGkB,MAApBA,EAAS+C,SACuD,IAAhE/C,EAASF,QAAQkD,IAAI,gBAAgBC,QAAQ,cAG7CpB,UAAUC,cAAcoB,MAAMnD,MAAK,SAAAiC,GACjCA,EAAamB,aAAapD,MAAK,WAC7BwB,OAAOC,SAAS4B,eAKpBzB,EAAgBC,MAGnBX,OAAM,WACLE,QAAQmB,IACN,oEAzDAe,CAAwBzB,GAHxBD,EAAgBC,OC7BxB0B,K","file":"static/js/main.b916d0ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LaLiga.2be24290.png\";","module.exports = __webpack_public_path__ + \"static/media/Bundesliga.3e055fb4.png\";","module.exports = __webpack_public_path__ + \"static/media/Eredivisie.07239886.png\";","module.exports = __webpack_public_path__ + \"static/media/Ligue1.4b2af31f.png\";","module.exports = __webpack_public_path__ + \"static/media/PremierLeague.2ea36f1c.png\";","module.exports = __webpack_public_path__ + \"static/media/SerieA.3ee74dc2.png\";","import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header>\n            {props.children}\n        </header>\n    );\n};\n\nexport default Header;","import React from 'react';\n\nconst Button = (props) => {\n    return (\n        <button onClick={props.handleClick} data-leagueid={props.leagueId}>\n            {props.text}\n        </button>\n    );\n};\n\nexport default Button;","import React from 'react';\n\nconst Row = (props) => {\n    return (\n        <tr>\n            <td className=\"team-position\">\n                {props.position}\n            </td>\n            <td className=\"team-name\">\n                <div className=\"crest\">\n                    <img src={props.crestURI} alt=\"\"/>\n                </div>\n                <span>{props.teamName}</span>\n            </td>\n            <td>\n                {props.playedGames}\n            </td>\n            <td>\n                {props.wins}\n            </td>\n            <td>\n                {props.draws}\n            </td>\n            <td>\n                {props.losses}\n            </td>\n            <td>\n                {props.goalsFor}\n            </td>\n            <td>\n                {props.goalsAgainst}\n            </td>\n            <td>\n                {props.goalDifference}\n            </td>\n            <td className=\"team-points\">\n                {props.points}\n            </td>\n        </tr>\n    );\n};\n\nexport default Row;","import React from 'react'\n\nconst TableBody = (props) => {\n    return (\n        <table className=\"standings\">\n            <tbody>\n                <tr className=\"table-head\">\n                    <td className=\"team-position\">\n                        #\n                    </td>\n                    <td className=\"team-name\">\n                        Team\n                    </td>\n                    <td title=\"Matches played\">\n                        MP\n                    </td>\n                    <td title=\"Wins\">\n                        W\n                    </td>\n                    <td title=\"Draws\">\n                        D\n                    </td>\n                    <td title=\"Losses\">\n                        L\n                    </td>\n                    <td title=\"Goals for\">\n                        GF\n                    </td>\n                    <td title=\"Goals against\">\n                        GA\n                    </td>\n                    <td title=\"Goals difference\">\n                        GD\n                    </td>\n                    <td title=\"Team points\">\n                        Pts\n                    </td>\n                </tr>\n                {props.children}\n            </tbody>\n        </table>\n    )\n}\n\nexport default TableBody","import React from 'react';\nimport Bundesliga from '../img/Bundesliga.png';\nimport Eredivisie from '../img/Eredivisie.png';\nimport LaLiga from '../img/LaLiga.png';\nimport Ligue1 from '../img/Ligue1.png';\nimport PremierLeague from '../img/PremierLeague.png';\nimport SerieA from '../img/SerieA.png';\n\nconst LeagueInfo = (props) => {\n    let imgSrc;\n    switch (props.leagueCaption) {\n\n        case \"Bundesliga\":\n            imgSrc = Bundesliga;\n            break;\n\n        case \"Eredivisie\":\n            imgSrc = Eredivisie;\n            break;\n\n        case \"Primera Division\":\n            imgSrc = LaLiga;\n            break;\n\n        case \"Ligue 1\":\n            imgSrc = Ligue1;\n            break;\n\n        case \"Premier League\":\n            imgSrc = PremierLeague;\n            break;\n\n        case \"Serie A\":\n            imgSrc = SerieA;\n            break;\n\n        default:\n            imgSrc = LaLiga;\n            break;\n    }\n\n    return (\n        <div className=\"league-info\">\n            <img src={imgSrc} alt=\"\" />\n        </div>\n    );\n};\n\nexport default LeagueInfo;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from '../components/Header';\nimport Button from '../components/Button';\nimport Row from '../components/Row';\nimport TableBody from '../components/TableBody';\nimport LeagueInfo from '../components/LeagueInfo';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      leagueName: 'La Liga',\n      rows: [],\n      leagueId: 'PD',\n      leagues: {\n        \"La Liga\": 'PD',\n        \"Premier League\": 'PL',\n        \"Eredivisie\": 'DED',\n        \"Ligue 1\": 'FL1',\n        \"Bundesliga\": 'BL1',\n        \"Serie A\": 'SA'\n      },\n      buttons: []\n    }\n    this.handleLeagueClick = this.handleLeagueClick.bind(this);\n  }\n\n  handleLeagueClick(e) {\n    const newId = e.target.getAttribute('data-leagueid');\n    this.setState({\n      leagueId: newId\n    }, () => { this.fetchData() });\n  }\n\n  fetchData() {\n    const Token = 'b7d52e61c66f4a0194be725042ad4359',\n      leagueId = this.state.leagueId,\n      URL = 'https://api.football-data.org/v2/competitions/' + leagueId + '/standings';\n\n    fetch(URL, { headers: { 'X-Auth-Token': Token } })\n      .then((response) => response.json())\n      .then((responseJson) => {\n        const rows = [];\n        responseJson.standings[0].table.map(\n          (item, index) => {\n            const { position, playedGames, won, draw, lost, goalsFor, goalsAgainst, goalDifference, points } = item;\n            const {crestUrl, name} = item.team;\n            \n            return (\n              rows.push(\n                <Row key={index} position={position} crestURI={crestUrl} teamName={name} playedGames={playedGames} wins={won} draws={draw} losses={lost} goalsFor={goalsFor} goalsAgainst={goalsAgainst} goalDifference={goalDifference} points={points} />\n              )\n            )\n          }\n        )\n        this.setState({\n          leagueName: responseJson.competition.name,\n          rows: rows\n        })\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  componentDidMount() {\n    this.fetchData();\n    for (let key in this.state.leagues) {\n      this.state.buttons.push(\n        <Button handleClick={this.handleLeagueClick} key={this.state.leagues[key]} leagueId={this.state.leagues[key]} text={key} />\n      )\n    }\n  }\n\n  render() {\n    \n    return (\n      <div className=\"app\">\n        <Header>\n          {this.state.buttons}\n        </Header>\n        <div className=\"container\">\n          <LeagueInfo leagueCaption={this.state.leagueName} />\n          <TableBody>\n            {this.state.rows}\n          </TableBody>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}